# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# ...
# meld conf/bashrc ~/.bashrc

#################
# luca was here #
#################

HISTCONTROL=ignoreboth:erasedups # cspell:disable-line

### Completion and Colorize

if [ "$(whoami)" != "root" ]; then
  PS1='${debian_chiroot:+($debian_chroot)}' # cspell:disable-line
  PS1=$PS1'\[\033[00;36m\]$(date +"%H:%M:%S") '
  PS1=$PS1'\[\033[00;32m\]\u@\h '
  PS1=$PS1'\[\033[01;34m\]\w'
  PS1=$PS1'\[\033[00;34m\]$(__git_ps1)'
  PS1=$PS1'\[\033[00m\] \$ '
else
  PS1='${debian_chiroot:+($debian_chroot)}' # cspell:disable-line
  PS1=$PS1'\[\033[00;36m\]$(date +"%H:%M:%S") '
  PS1=$PS1'\[\033[00;33m\]\u@\h '
  PS1=$PS1'\[\033[01;34m\]\w'
  PS1=$PS1'\[\033[00;34m\]$(__git_ps1)'
  PS1=$PS1'\[\033[00m\] \$ '
fi

# If this is an xterm set the window title to user@host:dir
case "$TERM" in
xterm*|rxvt*) # cspell:disable-line
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

function okko {
  ok=$?
  if  [ "$ok" = "0" ]; then
    art ok green
    sound powerup_success
  else
    art ko red
    sound error_6
  fi
}

# sets the terminal title
function title {
  if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "-h" ]; then
    echo -e "\nUsage:\n  set_title [title]\n";
  else
    if [[ -z "$ORIG" ]]; then
      ORIG=$PS1
    fi

    if (( $# < 1 )); then
      TITLE="\[\e]2;${PWD##*/}\a\]"
    else
      TITLE="\[\e]2;$*\a\]"
    fi

    PS1=${ORIG}${TITLE}
  fi
}

function clip_title {
  if (( $# < 1 )); then
    echo "Usage: clip_title <TITLE>"
    exit 1
  fi
  ps1='PS1="${PS1}\[\e]2;'"$*"'\a\]"'
  echo "$ps1" | xclip -selection c -i
  echo "$ps1 copied to the clipboard"
}

# get the package that contains the command
function which_package {
  dpkg -S $(which $1)
}

if [ -z $EDITOR ]; then
  EDITOR=pulsar
fi

function doc {
  mkdir -p /tmp/alldoc
  if [ ! -f /tmp/alldoc/$1.txt ]; then
    echo "generating the doc for $1 ..."
    echo "  - cht.sh"
    banner cht.sh | sd '╋' '┼' | ansi2txt > /tmp/alldoc/$1.txt
    cht.sh $1 2>&1 | ansi2txt >> /tmp/alldoc/$1.txt
    echo "  - --help"
    banner help | sd '╋' '┼' | ansi2txt >> /tmp/alldoc/$1.txt
    $1 --help 2>&1 | ansi2txt >> /tmp/alldoc/$1.txt
    echo "  - man"
    banner man | sd '╋' '┼' | ansi2txt >> /tmp/alldoc/$1.txt
    man $1 2>&1 | ansi2txt >> /tmp/alldoc/$1.txt
    echo "done :)"
  fi
  $EDITOR /tmp/alldoc/$1.txt &
}

export SNIPPETS_HOME="${HOME}/code/luca.pinelli/snippets"
export NOTES_PATH="/baita/code/my/notes"
export STUFF_PATH="/baita/code/my/stuff"
export ZIMNOTE_PATH="/baita/code/my/zimnote"
function everywhere {
  snippets ${@:1:$#-1} "${@: -1}"
  SNIPPETS_HOME="$NOTES_PATH" snippets ${@:1:$#-1} "${@: -1}"
  SNIPPETS_HOME="$STUFF_PATH" snippets ${@:1:$#-1} "${@: -1}"
  SNIPPETS_HOME="$ZIMNOTE_PATH" snippets ${@:1:$#-1} "${@: -1}"
}
alias stuff="SNIPPETS_HOME="${STUFF_PATH}" . snippets"
alias notes="SNIPPETS_HOME="${NOTES_PATH}" . snippets"
alias zimnote="SNIPPETS_HOME="${ZIMNOTE_PATH}" . snippets"

function dict {
  curl "https://api.dictionaryapi.dev/api/v2/entries/en/$1" \
  | formatCurl \
  | bat --language JavaScript --paging=never --style=plain
}

function wait_get {
  echo -n "GET $1 ..."
  count=0
  http_status=$(curl -o /dev/null -s -w "%{http_code}\n" $1 || echo "ignore error" > /dev/null)
  while [ "$http_status" != "$2" ]
  do
    count=$((count + 1))
    if (( count > 60 )); then
        echo "failed: '$1'"
        exit $http_status
    fi
    sleep 3
    echo -n "."
    http_status=$(curl -o /dev/null -s -w "%{http_code}\n" $1 || echo "ignore error" > /dev/null)
  done
  echo " $2"
}

function wait_for {
  echo -n "WAIT FOR $1 ..."
  count=0
  eval "$1" &> /dev/null
  status=$?
  while [ "$status" != "0" ]
  do
    count=$((count + 1))
    if (( count > 60 )); then
        echo " failed: exit status is ${status}"
        exit $status
    fi
    sleep 3
    echo -n "."
    eval "$1" &> /dev/null
    status=$?
  done
  echo " completed successfully"
}

function show_alias {
  echo -en "\033[00;34m⚙ " # set color blue and prefix '⚙' without new line
  alias $1 | sd '^[^=]*=' '' | sd '^[^;]*; *' ''  | sd '.$' ''
  echo -e '\033[00m' # reset the color
}

function clip_date {
  now="$(node -e 'console.log(new Date())')"
  echo -n "$now" | xclip -selection c
  echo "$now"
}

function clip_uuid {
  next="$(uuid)"
  echo -n "$next" | xclip -selection c
  echo "$next"
}

function is_command {
  found=$(compgen -c | rg "^$1$" | wc -l)
  if (( found > 0 )); then echo true; else echo false; fi
}

function is_alias {
  found=$(compgen -a | rg "^$1$" | wc -l)
  if (( found > 0 )); then echo true; else echo false; fi
}

function is_function {
  found=$(compgen -A function | rg "^$1$" | wc -l)
  if (( found > 0 )); then echo true; else echo false; fi
}

function is_builtin {
  found=$(compgen -b | rg "^$1$" | wc -l)
  if (( found > 0 )); then echo true; else echo false; fi
}

function is_keyword {
  found=$(compgen -k | rg "^$1$" | wc -l)
  if (( found > 0 )); then echo true; else echo false; fi
}

function wsearch {
  # blue with prefix '⚙'
  echo -e "\033[00;34m⚙ xdotool search --onlyvisible --name '$1' getwindowname \033[00m"
  xdotool search --onlyvisible --name "$1" getwindowname
}

function wresize {
  # blue with prefix '⚙'
  echo -e "\033[00;34m⚙ xdotool search --onlyvisible --name '$1' windowsize 2129 1362 \033[00m"
  xdotool search --onlyvisible --name "$1" windowsize 2129 1362
}

### Alias

alias ..='cd ..'
alias ...='..; ..'
alias ....='..; ..; ..'
alias l='ls --group-directories-first'
alias la='ls -a --group-directories-first'
alias ll='show_alias ll; ls -ohN --group-directories-first'
alias lla='show_alias lla; ls -ohNa --group-directories-first'
# // cspell:disable-next
alias commands='show_alias commands; compgen -abckA function | sort -u'
alias bp='bat -pp'
alias trash='gio trash'
alias npm_audit_high='show_alias npm_audit_high; npm audit | grep -B 1 -A 10 High'
alias docker_ps='show_alias docker_ps; docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"'
alias apt_history="show_alias apt_history; zcat /var/log/apt/history.log.*.gz | cat - /var/log/apt/history.log | sd ' \([^)]+\)' '' | sd ':amd64' '' | sd ',' '' | rg -i 'install|upgrade|remove|purge'"
alias dpkg_history="show_alias dpkg_history; zcat /var/log/dpkg.log.*.gz | cat - /var/log/dpkg.log | rg 'install |upgrade |remove ' "
alias serve='show_alias serve; miniserve --dirs-first --enable-zip --upload-files --overwrite-files --color-scheme-dark monokai --title $(basename $(pwd))'
#alias colog='sd "(DEBUG)" "\033[34m\$1\033[0m" | sd "(INFO)" "\033[32m\$1\033[0m" | sd "(WARN)" "\033[33m\$1\033[0m" | sd "(ERROR)" "\033[31m\$1\033[0m"'
alias git_untracked='show_alias git_untracked; git status --short --untracked-files | cut --delimiter=" " --fields=2'
alias git_tree='show_alias git_tree; git-tree -- --format="%C(auto)%h %d %<(50,trunc)%s"'
alias watch_modify="inotifywait -qq --event modify --recursive --exclude 'node_modules'" # e.g. while watch_modify .; do dum test; done
alias clip='xclip -selection c -i' # copy the content of the file or of the piped input in the clipboard
alias clip_cat='xclip -selection c -o' # cat the clipboard
alias clip_save='xclip -selection c -o >' # copy the content of the clipboard in a file
alias clip_jq='j="$(xclip -selection c -o)" && echo "$j" | bat -l json --style=grid,numbers --paging never && echo "$j" | jq'
alias clip_extract_uuid='
xclip -selection c -o \
 | sd '"'"'.*([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}).*'"'"' '"'"'$1'"'"' \
 | xclip -selection c \
 && echo "new clipboard content: $(xclip -selection c -o)"
'
alias clip_extract_shortid='
xclip -selection c -o \
 | sd '"'"'.*([a-f0-9]{8})-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}.*'"'"' '"'"'$1'"'"' \
 | xclip -selection c \
 && echo "new clipboard content: $(xclip -selection c -o)"
'
#alias bottom='show_alias bottom; xfce4-terminal --title=bottom --geometry=128x48+100+100 --command "btm --mem_as_value -g" &'
alias bottom='show_alias bottom; gnome-terminal --title=bottom --geometry=128x48+100+100 -- btm --mem_as_value -g'
alias jsonkv="jq -r '
paths(scalars) as \$p
  | [ ([\$p[] | tostring] | join(\".\")), (getpath(\$p) | tojson) ]
  | join(\": \")
'"
alias xt='show_alias xt; xterm -fa monaco -fs 10 -fg rgb:BB/90/90 -bg rgb:3B/10/10  -geometry 100x8'
alias saysomething='show_alias saysomething; fortune | cowsay -f `ls /usr/share/cowsay/cows/ | shuf -n 1`'
alias speak='show_alias speak; espeak -g 4 -s 110'
alias xopen='show_alias xopen; xdg-open'
alias yt-mp3='show_alias yt-mp3; yt-dlp --extract-audio --audio-format mp3'
alias render_html='lynx --stdin -dump -width 160'
alias weather='show_alias weather; curl wttr.in'
alias clima='clima --skin ${STUFF_PATH}/conf/clima/skin_luca.hjson -p' # markdown viewer
alias mocp='mocp -T dark'
alias mp='mousepad'
alias code='codium-insiders'
alias codews='show_alias codews; title && codium-insiders . && sleep 1 && xdotool search --name ".*${PWD##*/}.*vscodium.*" windowsize 2129 1362'
alias search='show_alias search; banner search && rg --sort=path'
alias hg='show_alias hg; history | rg'

alias db='psql -U postgres -h localhost -p 5432 mydb' # cspell:disable-line
alias dbclip='sql="$(xclip -selection c -o)" && \
echo "$sql" | bat --style grid --paging never -l sql && \
db -c "$sql" | cat && \
history -s "db -c \"
${sql}
\" | cat"'
alias dbxclip='sql="$(xclip -selection c -o)" && \
echo "$sql" | bat --style grid --paging never -l sql && \
db -xc "$sql" | cat && \
history -s "db -xc \"
${sql}
\" | cat"'
alias dbhistory='history | awk '"'"'
{ if ($1 ~ /[0-9]+/ && $2 == "db") db_cmd = "true" }
{ if ($1 ~ /[0-9]+/ && $2 != "db") db_cmd = "false" }
{ if (db_cmd == "true") print $0 }
'"'"' '

alias ffdisplay1='show_alias ffdisplay1; ffplay -window_title "Display 1" -framerate 8 -f x11grab -i :0+0:0 -video_size 1920x1080'
alias ffdisplay2='show_alias ffdisplay2; ffplay -window_title "Display 2" -framerate 8 -f x11grab -i :0+1920:0 -video_size 2560x1440'
alias ffdisplay2small='show_alias ffdisplay2small; ffplay -window_title "Display 2" -framerate 8 -f x11grab -i :0+1920:0 -video_size 1920x1080'
alias ffwebcam='show_alias ffwebcam; ffplay -window_title "Webcam" -framerate 8 -f video4linux2 -i /dev/video0 -video_size 240x240'

alias chrome_unsafe='
google-chrome \
  --user-data-dir=/opt/alternative-home/chrome_unsafe \
  --ignore-certificate-errors \
  --unsafely-treat-insecure-origin-as-secure=https://localhost
'

### GIT config by env vars
# @see https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables
export GIT_PAGER=riff

### PATH
export PATH="$PATH:/opt/bin:$STUFF_PATH/sh:$STUFF_PATH/zx:$STUFF_PATH/nodejs"

  ######################################################################
  # WARNING!                                                           #
  ######################################################################
  # Do not use ~ in the PATH variable.                                 #
  # Paths that uses ~ are not recognized by not script programs        #
  # so the executables in these paths are not discovered by them       #
  # (e.g. using `whereis` or `find ... -exec ...` or `fd ... -x ...` ) #
  ######################################################################

################
# luca is gone #
################
