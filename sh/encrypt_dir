#!/usr/bin/env bash

set -e # -e  exit immediately when a command fails

if [ -z "$1" ] || [ "$1" == "--help" ]; then
  echo "
  SYNOPSIS
  encrypt_dir DIR_PATH

  You need to define and export the environment variable SECRET to use this utility,
  e.g.:
  export SECRET=don@t@speak@twice
  "
  exit
fi

if [[ -z "${SECRET}" ]]; then
  echo "
  You need to define and export the environment variable SECRET to use this utility,
  e.g.:
  export SECRET=don@t@speak@twice
  "
  exit
fi

count="$(fd -t f | wc -l)"
echo -en "\033[00;34m Do you want to encrypt $count file(s) [y/n] (default n)? \033[00m"
read -n 1 continue
echo
if [ "$continue" != "y" ]; then
  echo -e '\033[00;34m Skipping encryption\033[00m'
  echo -e '\033[00;34m Terminated\033[00m'
  exit
fi

encrypted="$(fd | xargs file -b | rg '^data$' | wc -l)"
if ((encrypted > 0)); then
  echo -e "\033[00;34m The folder contains $encrypted data file(s)."
  echo -en '\033[00;34m Do you want to encrypt the folder [y/n] (default n)? \033[00m'
  read -n 1 continue
  echo
  if [ "$continue" != "y" ]; then
    echo -e '\033[00;34m Skipping encryption\033[00m'
    echo -e '\033[00;34m Terminated\033[00m'
    exit
  fi
fi

if key="$(increaseKeyLength "$SECRET" 128000)"; then
  # increaseKeyLength completed successfully
  echo -e '\033[00;34m + xor --force -k "$key" -r .\033[00m'
  xor --force -k "$key" -r .
else
  # print the error
  echo "$key"
fi
