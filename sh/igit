#!/usr/bin/env bash

blue="\033[00;34m"
red="\033[00;31m"
reset="\033[00m"

HELP="

USAGE:

  igit <ACTION> [OPTIONS]

ACTIONS:

  status
    shows the git status, the stash list and the unmerged branches

  pull
    pull the changes, shows the git status, the stash list and the unmerged branches

  log [search pattern]
    if text-filter is not specified logs the lasts 60 commits,
    otherwise show all the commits that matches the given pattern

  diff [git diff options]
    shows the diffs using Meld

  mr <new branch name>
    commits and pushes the staged changes to a new branch named as specified

  stash-unstaged <stash name>
    stashes the unstaged changes

  checkout <branch name>
    stashes the local changes, checkouts the branch, updates it and pop the stash

  restore <file/directory>
    restore the specified file/directory to the original content

  list [OPT]
    list file that has been:
    ?, untraked
    A, added
    M, modified
    D, deleted

  help
    show this help
"

WRONG_SYNTAX="
${red}ERROR: wrong syntax.${reset}
$HELP"

label() {
  echo -e "\n${blue}$1${reset}\n";
}

status() {
  label "git status -sb"
  git status -sb
  label "git stash list"
  git stash list
  label "git branch --merged | grep -vE ' development$| qa$| master$| release$|^\*'"
  git branch --merged | grep -vE ' development$| qa$| master$| release$|^\*'
}

pull() {
  label "git pull"
  git pull
  status
  olds=$(git branch --merged | grep -vE ' development$| qa$| master$| release$|^\*' | wc -l)
  if (( $olds > 0 )); then
    read -p "Do you want to remove the merged branches? (yes/no) " yn
    if [ "$yn" = "yes" ]; then
      label "git branch --merged | grep -vE ' development$| qa$| master$| release$|^\*' | xargs git branch -d"
      git branch --merged | grep -vE ' development$| qa$| master$| release$|^\*' | xargs git branch -d
    fi
  fi
}

log() {
  if [ -z "$1" ]; then # if $1 is empty
    label "git log --format='%ad %h %aE %s' --date='format:%Y.%m.%d %H:%M' --max-count=60 | grep -v 'Merge' | tac"
    git log --format='%ad %h %aE %s' --date='format:%Y.%m.%d %H:%M' --max-count=60 | grep -v 'Merge' | tac
  else
    label "git log --format='%ad %h %aE %s' --date='format:%Y.%m.%d %H:%M'  | grep -e \"$1\" | grep -v 'Merge' | tac"
    git log --format='%ad %h %aE %s' --date='format:%Y.%m.%d %H:%M'  | grep -e "$1" | grep -v 'Merge' | tac
  fi
}

diff() {
  label "git difftool --tool=meld --dir-diff $@"
  git difftool --tool=meld --dir-diff $@;
}

mr() {
  # if $1 is empty print the help and exit
  if [ -z "$1" ]; then echo -e "$WRONG_SYNTAX"; exit; fi

  branchName="$1"
  label "git checkout -b $branchName" && \
  git checkout -b $branchName && \
  label "git commit -m $branchName" && \
  git commit -m $branchName && \
  label "git push --set-upstream origin $branchName" && \
  git push --set-upstream origin $branchName;
}

stash_unstaged() {
  # if $1 is empty print the help and exit
  if [ -z "$1" ]; then echo -e "$WRONG_SYNTAX"; exit; fi

  path="$1"
  label "git commit -m 'temp'" && \
  git commit -m 'temp' && \
  label "git stash save \"$1\"" && \
  git stash save "$1" && \
  label "git reset HEAD^1" && \
  git reset HEAD^1 && \
  label "git add ." && \
  git add .
}

checkout() {
  # if $1 is empty print the help and exit
  if [ -z "$1" ]; then echo -e "$WRONG_SYNTAX"; exit; fi

  branchName="$1"
  label "git stash" && \
  git stash && \
  label "git checkout $branchName" && \
  git checkout $branchName && \
  label "git pull" && \
  git pull && \
  label "git stash pop" && \
  git stash pop
}

restore() {
  # if $1 is empty print the help and exit
  if [ -z "$1" ]; then echo -e "$WRONG_SYNTAX"; exit; fi

  paths="$@"
  label "git reset HEAD $paths" && \
  git reset HEAD $paths && \
  label "git add $paths" && \
  git add $paths && \
  label "git reset HEAD $paths" && \
  git reset HEAD $paths && \
  label "git checkout $paths" && \
  git checkout $paths
}

list() {
  # if $1 is empty print the help and exit
  if [ -z "$1" ]; then echo -e "$WRONG_SYNTAX"; exit; fi

  case "$1" in
    "untracked" | "?")
      git status -sb | grep '^[?][?] ' | sed -r 's/.. "?([^"]*)"?/"\1"/g' | tr '\n' ' '
      ;;

    "added" | "A")
      git status -sb | grep '^A  ' | sed -r 's/.. (.*)/\1/g' | tr '\n' ' '
      ;;

    "modified" | "M")
      git status -sb | grep '^ M ' | sed -r 's/.. (.*)/\1/g' | tr '\n' ' '
      ;;

    "deleted" | "D")
      git status -sb | grep '^ D ' | sed -r 's/.. (.*)/\1/g' | tr '\n' ' '
      ;;
    *)
      echo -e "$WRONG_SYNTAX"; exit ;;
  esac
  echo ""
}

case "$1" in
  "status")
    status ;;
  "pull")
    pull ;;
  "log")
    log "$2" ;;
  "diff")
    diff ${@:2} ;;
  "mr")
    mr "$2" ;;
  "stash-unstaged")
    stash_unstaged "$2" ;;
  "checkout")
    checkout "$2" ;;
  "restore")
    restore ${@:2} ;;
  "list")
    list "$2" ;;
  *)
    echo "$HELP" ;;
esac
